#!/usr/bin/env bash

###############################
# Read a PDF file, convert it to a DICOM
# Encapsulated PDF Storage SOP instance and
# store the converted data to an output file using
# pdf2dcm from DCMTK -
# https://support.dcmtk.org/docs/pdf2dcm.html
#
# Author: Stephen Wastling
# Acknowledgements: Maciej Radzikowski for the
# Bash script template
# https://betterdev.blog/minimal-safe-bash-script-template/
# and the DCMTK developers
###############################

# -E - ensure ERR trap is handled correctly
# -e - exit immediately when a command fails
# -o pipefail - set the exit code of a pipeline to
# that of the rightmost command to exit with a
# non-zero status, or to zero if all commands of
# the pipeline exit successfully.
# -u - treat unset variables as an error and exit
# immediately
set -Eeuo pipefail

# expand patterns that don't match files to the
# null string instead of returning a sting
#containing the pattern search for
shopt -s nullglob

# run the cleanup function (defined below) if
# SIGINT, SIGTERM, ERR or EXIT signals are
# received
trap cleanup SIGINT SIGTERM ERR EXIT

###############################
# Display a usage message for the user then exit
###############################
usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [--no-color] pdf_in dcm_ref dcm_out doc_title series_num

Read a PDF file, convert it to a DICOM Encapsulated PDF Storage SOP instance and store the converted data to an output file using pdf2dcm from DCMTK

Positional arguments:
pdf_in          PDF input filename to be encapsulated
dcm_ref         read patient/study data from this reference DICOM file
dcm_out         DICOM output filename
doc_title       PDF document title used in DocumentTitle, ProtocolName and SeriesDescription attributes
series_num      series number for DICOM output

Optional arguments:
-h, --help      print help and exit
--no-color      don't colorize terminal output

Note: The IssuerOfPatientID tag is set using the environment variable PDF2DCM_ISSUEROFPATIENTID_ENV. If this is not set "AAA" is used by default. PDF2DCM_ISSUEROFPATIENTID_ENV can be set in your .bashrc file with

export PDF2DCM_ISSUEROFPATIENTID_ENV="MY_ISSUER"

The attributes in dcm_out have been checked against the requirements of IODs and Modules defined in DICOM PS 3.3 Information Object Definition ising dciodvfy by David Clunie

EOF
  exit
}

###############################
# Reset SIGINT, SIGTERM, ERR and EXIT
# signals to their initial values
###############################
cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
}

###############################
# Define colors to use in msg function
# Globals:
#   NOFORMAT
#   RED
#   GREEN
#   YELLOW
###############################
setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    # set color variable if:
    # stderr is connected to the terminal AND
    # NO_COLOR is empty AND
    # terminal is NOT dumb
    NOFORMAT='\033[0m' RED='\033[0;31m'
  else
    NOFORMAT='' RED=''
  fi
}

###############################
# Send command output to standard error
# Globals:
# Outputs: message to stderr
###############################
msg() {
  # -e option enables interpretation of backslash
  # escapes
  # when using set -u option "${1-}" is needed to
  # ensure no error if $1 is unset
  echo >&2 -e "${1-}"
}

###############################
# Display an exit message to the user and set exit
# code
# Outputs: message to stderr
# Returns: exit code
###############################
die() {
  local msg="${1}"
  local code="${2-1}" # set default exit status to 1
  msg "$msg"
  exit "$code"
}

###############################
# Parse input parameters
# Globals:
#   args
#   NO_COLOR
###############################
parse_params() {
  while :; do
    case "${1-}" in
    -h | --help) usage ;; # display usage if user type h or help
    --no-color) NO_COLOR=1 ;; # set colored output
    -?*) die "Unknown option: $1" ;; # exit if given unknow optional argument
    *) break ;; # collect up the postional arguments
    esac # end of case statement
    shift
  done

  # put all arguments from command line into an
  # array called args
  args=("$@")

  # check if five required arguments were given
  # by the user, if not display the script usage and
  # exit. Here ${#args[@]} means the number of
  # elements in args array
  [[ ${#args[@]} -ne 5 ]] && usage

  return 0
}

###############################
# Get a key-value from a DICOM query response file
# Arguments:
#    DICOM response file
#    key-name
# Output:
#    key-value
###############################
get_val(){

  local -r fn="${1}"
  local -r kn="${2}"
  local d
  local kv
  d=$(dcmdump "${fn}" +P "${kn}" -s)

  if [[ "${d}" =~ (no value available) ]]; then
    # when the tag is present but empty
    kv=""
  else
    # this capture the case when the key is missing
    # or when it's found and has a vlaue
    kv=$(echo "${d}" | cut -d "[" -f 2 | cut -d "]" -f 1)
  fi

  echo "${kv}"
}

parse_params "$@"
setup_colors

declare -r pdffile_in="${args[0]}"
declare -r dcmfile_ref="${args[1]}"
declare -r dcmfile_out="${args[2]}"
declare -r doc_title="${args[3]}"
declare -r series_num="${args[4]}"

# check if dcmfile_ref file exists
if ! [[ -f  "${dcmfile_ref}" ]]; then
    die "${RED}ERROR: ${dcmfile_ref} file not found${NOFORMAT}"
fi

# check if series_num is an integer
if ! [[ "${series_num}" =~ ^[0-9]+$ ]]; then
    die "${RED}ERROR: series_num must be an integer${NOFORMAT}"
fi

# get the IssuerOfPatientID from environment variable
declare -r PDF2DCM_ISSUEROFPATIENTID="${PDF2DCM_ISSUEROFPATIENTID_ENV:-AAA}"

# set the manufacturer and station details
declare -r Manufacturer="OFFIS_DCMTK"
declare -r ManufacturerModelName="OFFIS_DCMTK"
declare -r StationName="PDF_Generator"

# get current date and time
declare CurrentDate
declare CurrentTime
declare CurrentDateTime

#EDV 20240403 Added modification for MacOs
case "$OSTYPE" in
  darwin*)
    CurrentDate=$(date '+%Y%m%d')
    CurrentTime=$(date '+%H%M%S'.000000)
  ;;
  #linux*)   echo "LINUX" ;;
  *)
    printf -v CurrentDate '%(%Y%m%d)T' -1
    printf -v CurrentTime '%(%H%M%S)T' -1
  ;;
esac

printf -v CurrentDateTime '%s%s' "${CurrentDate}" "${CurrentTime}"

# get type 2 attributes from reference DICOM file
# that are not set by pdf2dcm
# type 2:  required attribute, but can be empty
declare StudyDate
declare StudyTime
declare AccessionNumber
declare StudyID

StudyDate=$(get_val "${dcmfile_ref}" "StudyDate")
StudyTime=$(get_val "${dcmfile_ref}" "StudyTime")
AccessionNumber=$(get_val "${dcmfile_ref}" "AccessionNumber")
StudyID=$(get_val "${dcmfile_ref}" "StudyID")

# get type 3 attributes from reference DICOM file
# that are not set by pdf2dcm
# type 2:  optional attribute
declare InstitutionName
declare InstitutionAddress
declare ReferringPhysicianName
declare StudyDescription
declare PatientAge
declare PatientWeight

InstitutionName=$(get_val "${dcmfile_ref}" "InstitutionName")
InstitutionAddress=$(get_val "${dcmfile_ref}" "InstitutionAddress")
ReferringPhysicianName=$(get_val "${dcmfile_ref}" "ReferringPhysicianName")
StudyDescription=$(get_val "${dcmfile_ref}" "StudyDescription")
PatientAge=$(get_val "${dcmfile_ref}" "PatientAge")
PatientWeight=$(get_val "${dcmfile_ref}" "PatientWeight")

# encapsulate PDF file
pdf2dcm --title "${doc_title}" --study-from "${dcmfile_ref}" --instance-one -k "StudyDate"="${StudyDate}" -k "SeriesDate"="${CurrentDate}" -k "ContentDate"="${CurrentDate}" -k "AcquisitionDateTime"="${CurrentDateTime}" -k "StudyTime"="${StudyTime}" -k "SeriesTime"="${CurrentTime}" -k "ContentTime"="${CurrentTime}" -k "AccessionNumber"="${AccessionNumber}" -k "Manufacturer"="${Manufacturer}" -k "InstitutionName"="${InstitutionName}" -k "InstitutionAddress"="${InstitutionAddress}" -k "ReferringPhysicianName"="${ReferringPhysicianName}" -k "StationName"="${StationName}" -k "StudyDescription"="${StudyDescription}" -k "SeriesDescription"="${doc_title}" -k "ManufacturerModelName"="${ManufacturerModelName}" -k "IssuerOfPatientID"="${PDF2DCM_ISSUEROFPATIENTID}" -k "PatientAge"="${PatientAge}" -k "PatientWeight"="${PatientWeight}" -k "ProtocolName"="${doc_title}" -k "StudyID"="${StudyID}" -k "SeriesNumber"="${series_num}" "${pdffile_in}" "${dcmfile_out}"
